import asyncio
import logging
import random
from datetime import datetime
from typing import List, Dict, Any
from aiogram import Bot
from bot.supabase_client.client import SupabaseClient

class NotificationService:
    def __init__(self, bot: Bot, supabase_client: SupabaseClient):
        self.bot = bot
        self.supabase_client = supabase_client
    
    # Warm and motivational messages in Russian
    MOTIVATIONAL_MESSAGES = [
        "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –ö–∞–∫—É—é —Ü–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏—Ç–µ —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?",
        "‚òÄÔ∏è –ü—Ä–∏–≤–µ—Ç! –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É. –í—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
        "üå∏ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞.",
        "üí´ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç. –ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
        "üå∫ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –ü–æ–º–Ω–∏—Ç–µ: —Å–∞–º—ã–µ –≤–µ–ª–∏–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.",
        "ü¶ã –ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –¥–µ–ª–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–π —à–∞–≥, –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—è –≤ —Å–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "üåü –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–Ω—è! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ —à–∞–Ω—Å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –≥–ª–∞–≤—É —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞.",
        "üåª –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–∞—à–∞ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏ ‚Äî —ç—Ç–æ –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π.",
        "‚ú® –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è! –ü–æ–º–Ω–∏—Ç–µ: –∑–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –æ–∫—É–ø–∞–µ—Ç—Å—è —Å –ª–∏—Ö–≤–æ–π.",
        "üéØ –ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Ç–æ–º, —á—Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
        "üåà –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –í–∞—à–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ä–æ—Å—Ç—É ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç –≤–∞—Å –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.",
        "üíé –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∂–¥—ã–π —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏–∑—É—á–∞–µ—Ç–µ, –¥–µ–ª–∞–µ—Ç –≤–∞—Å –±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.",
        "üöÄ –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! –í–∞—à–∏ —É—Å–∏–ª–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è ‚Äî —ç—Ç–æ –≤–∞—à —É—Å–ø–µ—Ö –∑–∞–≤—Ç—Ä–∞.",
        "üåô –î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞! –î–∞–∂–µ –≤–µ—á–µ—Ä–æ–º –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è. –í—ã –º–æ–ª–æ–¥–µ—Ü!",
        "‚≠ê –ü—Ä–∏–≤–µ—Ç! –í–∞—à–∞ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ—Å—Ç–æ–π–Ω–∞ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è."
    ]
    
    EVENING_MESSAGES = [
        "üåÖ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å! –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–µ–º—É, –∏–∑—É—á–∏–≤ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º.",
        "üåô –î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞! –í—Ä–µ–º—è –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º.",
        "‚ú® –í–µ—á–µ—Ä ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏.",
        "üåÜ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–µ–Ω—å —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
        "üåü –î–æ–±—Ä–æ–≥–æ –≤–µ—á–µ—Ä–∞! –î–∞–∂–µ 15 –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –∑–∞–≤—Ç—Ä–∞."
    ]
    
    def get_motivational_message(self, hour: int) -> str:
        """Get appropriate motivational message based on time of day"""
        if 18 <= hour <= 23:  # Evening messages
            return random.choice(self.EVENING_MESSAGES)
        else:  # General motivational messages
            return random.choice(self.MOTIVATIONAL_MESSAGES)
    
    async def send_notification_to_user(self, telegram_id: int, message: str) -> bool:
        """Send notification to a specific user"""
        try:
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode="HTML"
            )
            logging.info(f"Notification sent to user {telegram_id}")
            return True
        except Exception as e:
            logging.error(f"Failed to send notification to user {telegram_id}: {e}")
            return False
    
    async def send_scheduled_notifications(self) -> Dict[str, Any]:
        """Send notifications to all users who should receive them now"""
        try:
            current_time = datetime.now()
            current_hour = f"{current_time.hour:02d}:00"
            current_weekday = current_time.strftime('%A').lower()
            
            logging.info(f"Checking notifications for {current_hour} on {current_weekday}")
            
            # Get users who should receive notifications
            users_to_notify = await self.supabase_client.get_users_for_notification(
                current_hour, current_weekday
            )
            
            if not users_to_notify:
                logging.info("No users to notify at this time")
                return {
                    "status": "success",
                    "users_notified": 0,
                    "message": "No users scheduled for notifications"
                }
            
            # Send notifications
            successful_sends = 0
            failed_sends = 0
            
            for user in users_to_notify:
                telegram_id = user['telegram_id']
                username = user.get('username', 'Unknown')
                
                # Get appropriate message based on time
                motivational_message = self.get_motivational_message(current_time.hour)
                
                # Add personal touch if username available
                if username and username != 'Unknown':
                    personal_greeting = f"–ü—Ä–∏–≤–µ—Ç, {username}! "
                    message = personal_greeting + motivational_message
                else:
                    message = motivational_message
                
                
                success = await self.send_notification_to_user(telegram_id, message)
                
                if success:
                    successful_sends += 1
                    logging.info(f"‚úÖ Notification sent to {username} ({telegram_id})")
                else:
                    failed_sends += 1
                    logging.error(f"‚ùå Failed to send notification to {username} ({telegram_id})")
                
                # Small delay to avoid rate limiting
                await asyncio.sleep(0.1)
            
            result = {
                "status": "completed",
                "users_notified": successful_sends,
                "failed_notifications": failed_sends,
                "total_users": len(users_to_notify),
                "time": current_hour,
                "weekday": current_weekday
            }
            
            logging.info(f"Notification batch completed: {successful_sends}/{len(users_to_notify)} successful")
            return result
            
        except Exception as e:
            logging.error(f"Error in send_scheduled_notifications: {e}")
            return {
                "status": "error",
                "error": str(e)
            }
    
    async def test_notification(self, telegram_id: int) -> bool:
        """Send a test notification to a specific user"""
        test_message = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
            "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        )
        
        return await self.send_notification_to_user(telegram_id, test_message)